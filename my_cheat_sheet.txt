Top commands :

docker build -t myimage:1.0
docker image ls
docker image rm myimage:1.0

docker container run --name web -p 5000:80 myimage:1.0
docker container stop web
docker container kill web
docker network ls
docker container ls -all
docker container rm -f $(docker ps -aq) 
docker container logs --tail 100 web

################
docker <command>

app*      Docker Application
assemble* Framework-aware builds (Docker Enterprise)
builder   Manage builds
cluster   Manage Docker clusters (Docker Enterprise)
config    Manage Docker configs
context   Manage contexts
engine    Manage the docker Engine
image     Manage images
network   Manage networks
node      Manage Swarm nodes
plugin    Manage plugins
registry* Manage Docker registries
secret    Manage Docker secrets
service   Manage services
stack     Manage Docker stacks
swarm     Manage swarm
system    Manage Docker
template* Quickly scaffold services (Docker Enterprise)
trust     Manage trust on Docker images
volume    Manage volumes
#/docker
########

#############################################################
#https://docs.docker.com/engine/reference/commandline/images/
#Docker image captures the private filesystem that your containerized processes will run in

docker images [OPTIONS] [REPOSITORY[:TAG]]
--all , -a		  Show all images (default hides intermediate images)
--digests		    Show digests
--filter , -f		Filter output based on conditions provided
--format		    Pretty-print images using a Go template
--no-trunc		  Don’t truncate output
--quiet , -q		Only show numeric IDs

Format the output
The formatting option (--format) will pretty print container output using a Go template.

Valid placeholders for the Go template are listed below:
.ID	          Image ID
.Repository	  Image repository
.Tag	        Image tag
.Digest	      Image digest
.CreatedSince	Elapsed time since the image was created
.CreatedAt	  Time when the image was created
.Size	        Image disk size
#/docker image
##############

################################################################
#https://docs.docker.com/engine/reference/commandline/container/
docker container COMMAND

docker container attach	    Attach local standard input, output, and error streams to a running container
docker container commit	    Create a new image from a container’s changes
docker container cp	        Copy files/folders between a container and the local filesystem
docker container create	    Create a new container
docker container diff	      Inspect changes to files or directories on a container’s filesystem
docker container exec	      Run a command in a running container
docker container export	    Export a container’s filesystem as a tar archive
docker container inspect	  Display detailed information on one or more containers
docker container kill	      Kill one or more running containers
docker container logs	      Fetch the logs of a container
docker container ls	        List containers
docker container pause	    Pause all processes within one or more containers
docker container port	      List port mappings or a specific mapping for the container
docker container prune	    Remove all stopped containers
docker container rename	    Rename a container
docker container restart	  Restart one or more containers
docker container rm	        Remove one or more containers
docker container run	      Run a command in a new container
docker container start	    Start one or more stopped containers
docker container stats	    Display a live stream of container(s) resource usage statistics
docker container stop	      Stop one or more running containers
docker container top	      Display the running processes of a container
docker container unpause	  Unpause all processes within one or more containers
docker container update	    Update configuration of one or more containers
docker container wait	      Block until one or more containers stop, then print their exit codes
#/docker container
##################

##################################################
#https://docs.docker.com/engine/reference/builder/
docker build [OPTIONS] PATH | URL | -

--add-host		                Add a custom host-to-IP mapping (host:ip)
--build-arg		                Set build-time variables
--cache-from		              Images to consider as cache sources
--cgroup-parent		            Optional parent cgroup for the container
--compress		                Compress the build context using gzip
--cpu-period		              Limit the CPU CFS (Completely Fair Scheduler) period
--cpu-quota		                Limit the CPU CFS (Completely Fair Scheduler) quota
--cpu-shares , -c		          CPU shares (relative weight)
--cpuset-cpus		              CPUs in which to allow execution (0-3, 0,1)
--cpuset-mems		              MEMs in which to allow execution (0-3, 0,1)
--disable-content-trust	true	Skip image verification
--file , -f		                Name of the Dockerfile (Default is ‘PATH/Dockerfile’)
--force-rm		                Always remove intermediate containers
--iidfile		                  Write the image ID to the file
--isolation		                Container isolation technology
--label		                    Set metadata for an image
--memory , -m		              Memory limit
--memory-swap		              Swap limit equal to memory plus swap: ‘-1’ to enable unlimited swap
--network		                  Set the networking mode for the RUN instructions during build
--no-cache		                Do not use cache when building the image
--output , -o		              Output destination (format: type=local,dest=path)
--platform		                Set platform if server is multi-platform capable
--progress	auto	            Set type of progress output (auto, plain, tty). Use plain to show container output
--pull		                    Always attempt to pull a newer version of the image
--quiet , -q		              Suppress the build output and print image ID on success
--rm	true	                  Remove intermediate containers after a successful build
--secret		                  Secret file to expose to the build (only if BuildKit enabled): id=mysecret,src=/local/secret
--security-opt		            Security options
--shm-size		                Size of /dev/shm
--squash                      Squash newly built layers into a single new layer
--ssh		                      SSH agent socket or keys to expose to the build (only if BuildKit enabled) (format: default|[=|[,]])
--stream		                  Stream attaches to server to negotiate build context
--tag , -t		                Name and optionally a tag in the ‘name:tag’ format
--target		                  Set the target build stage to build.
--ulimit		                  Ulimit options

#/docker build
##############
